//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import "ILendingChecker.sol";
import "LendWrapper.sol";

contract ERC721Lender is ILendingChecker {



    // ------ Events -------

    // ------ Public functions -------
    function register(address _newTokenAddress) {
        //create ERC721LendingWrapper wrapper contract and a mapping

    }

    function lendOut(erc721Address, tokenId, borrower, startTime, durationInSeconds) {
    //lends out an erc721 token to the rentee by calling the wrapper contract's 'lendOut' option
    }

    function balanceOf(erc721Address, ownerToCheck) {
    // returns balance for ownerToCheck by checking token addresses: (check the following addresses: direct wrapper reference, lookup wrapper using given address, finally, use actual erc721 address)
    }

    function ownerOf(erc721Address, tokenId) {
        // returns owner address of token (check the following addresses: direct wrapper reference, lookup wrapper using given address, finally, use actual erc721 address)
    }

    collect(erc721Address, tokenId) {
    //withdraw actual NFT from wrapper contract
    }
    function balanceOf(address _tokenAddress, address _owner) public view returns (uint256) {
        return 0;
    }

    function ownerOf(address _tokenAddress, uint256 _tokenId) public view returns (address) {
        return "";
    }

}
